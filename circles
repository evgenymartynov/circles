#!/usr/bin/env python

import re, sys
import urllib

MAX_OPTIONS = 100
URL_BASE = r'http://www.timetable.unsw.edu.au/2012/%s.html'
OFFSET = 6
tags_re = re.compile(r'<[^>]*>')
dow_re = re.compile(r'\([^\(]*\)')

valid = 0

def print_timetable(times):
    global valid
    valid += 1
    if valid == MAX_OPTIONS:
        print 'Reached %d options; not printing out any more.' % MAX_OPTIONS
    if valid >= MAX_OPTIONS:
        return
    days = len(times)
    slots = len(times[0])

    print '=' * 160

    days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']
    print '     ',
    for d in xrange(5):
        print '%30s' % days[d],
    print
    print '-' * 160

    first, last = None, None
    for t in xrange(slots):
        subjects = [times[x][t] for x in xrange(5)]
        if any(subjects):
            if first is None:
                first = t
            last = t
        else:
            continue

    for t in xrange(first, last+1):
        print '%2d:00 |' % t,
        for d in xrange(5):
            print '%30s' % str(times[d][t] or '-')[:30],
        print

def generate(courses, times):
    if courses == []:
        print_timetable(times)
        return

    name, course = courses[0]
    for option in course:
        valid = True
        for slot in option:
            day, start, end = slot
            for i in xrange(start, end):
                if times[day][i]:
                    valid = False
                    break
        if not valid:
            continue

        # Try it
        for slot in option:
            day, start, end = slot
            for i in xrange(start, end):
                times[day][i] = name

        generate(courses[1:], times)

        for slot in option:
            day, start, end = slot
            for i in xrange(start, end):
                times[day][i] = False

def get_lines(subject):
    url = URL_BASE % subject
    return urllib.urlopen(url)

def print_classes(classes):
    for k, v in classes.iteritems():
        print '%s\n\t%s\n' % (k, '\n\t'.join(map(str, v)))

def dow_to_int(s):
    return {'Mon': 0, 'Tue': 1, 'Wed': 2, 'Thu': 3, 'Fri': 4}[s]

def get_classes(subject):
    lines = map(lambda x: x.strip(), [line for line in get_lines(subject)])

    classes = {}

    i = 0
    while i < len(lines)-5:
        if '#S2-' in lines[i]:
            name = subject + ' ' + re.sub(tags_re, '', lines[i], 10)
            times = re.sub(tags_re, '', lines[i+OFFSET], 10)
            # Readability? Fuck that.
            times = [(dow_to_int(time[0]), int(time[1][:2]), int(time[3][:2])) for time in map(lambda x: x.split(), map(lambda x: x.strip(), re.sub(dow_re, '', times).split(', ')))]
            classes[name] = classes.get(name, []) + [times]
            i += OFFSET
        else:
            i += 1

    return classes

all_classes = {}

if len(sys.argv) < 2:
    print 'Usage: circles <subject> [subject] [subject...]'
    sys.exit(1)

subjects = map(lambda x: x.upper(), sys.argv[1:])
print 'Fetching timetables for', map(lambda x: x.upper(), subjects)

for c in subjects:
    classes = get_classes(c)
    if not classes:
        print 'Could not find subject `%s\'. Aborting.' % c
        sys.exit(1)
    all_classes.update(classes)

print_classes(all_classes)

stuff = all_classes.items()
time_slots = [[False] * 24 for i in xrange(5)]
generate(stuff, time_slots)

print 'Got %d timetable options!' % valid
