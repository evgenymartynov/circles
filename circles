#!/usr/bin/env python

import re, sys
import urllib

import circles_generator

MAX_OPTIONS = 100
SORTING_ORDER = None

URL_BASE = r'http://www.timetable.unsw.edu.au/2012/%s.html'
OFFSET = 6
DAYS = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri']
tags_re = re.compile(r'<[^>]*>')
dow_re = re.compile(r'\([^\(]*\)')

def print_timetable(times):
    days = len(times)
    slots = len(times[0])

    print '=' * 160

    print '     ',
    for d in xrange(5):
        print '%30s' % DAYS[d],
    print
    print '-' * 160

    first, last = None, None
    for t in xrange(slots):
        subjects = [times[x][t] for x in xrange(5)]
        if any(subjects):
            if first is None:
                first = t
            last = t
        else:
            continue

    for t in xrange(first, last+1):
        print '%2d:00 |' % t,
        for d in xrange(5):
            print '%30s' % str(times[d][t] or '-')[:30],
        print

def get_lines(subject):
    url = URL_BASE % subject
    return urllib.urlopen(url)

def print_classes(classes):
    for k, v in classes.iteritems():
        print '%s\n\t%s\n' % (k, '\n\t'.join(map(str, v)))

def dow_to_int(s):
    return DAYS.index(s)

def get_classes(subject):
    lines = map(lambda x: x.strip(), [line for line in get_lines(subject)])

    classes = {}

    i = 0
    while i < len(lines)-5:
        if '#S2-' in lines[i]:
            name = subject + ' ' + re.sub(tags_re, '', lines[i], 10)
            times = re.sub(tags_re, '', lines[i+OFFSET], 10)
            # Readability? Fuck that.
            times = [(dow_to_int(time[0]), int(time[1][:2]), int(time[3][:2])) for time in map(lambda x: x.split(), map(lambda x: x.strip(), re.sub(dow_re, '', times).split(', ')))]
            classes[name] = classes.get(name, []) + [times]
            i += OFFSET
        else:
            i += 1

    return classes

from optparse import OptionParser
parser = OptionParser()
parser.add_option('-n', dest='num_timetables', help='Number of displayed timetables')
parser.add_option('-f', dest='sorting_order', action='store_const', const='free', help='Sort by number of free days')

(options, args) = parser.parse_args()
MAX_OPTIONS = int(options.num_timetables or MAX_OPTIONS)
SORTING_ORDER = options.sorting_order

all_classes = {}

if len(args) == 0:
    print 'Usage: circles <subject> [subject] [subject...]'
    sys.exit(1)

subjects = map(lambda x: x.upper(), args)
print 'Fetching timetables for', map(lambda x: x.upper(), subjects)

for c in subjects:
    classes = get_classes(c)
    if not classes:
        print 'Could not find subject `%s\'. Aborting.' % c
        sys.exit(1)
    all_classes.update(classes)

print_classes(all_classes)

stuff = all_classes.items()
time_slots = [[False] * 24 for i in xrange(5)]
tables = circles_generator.generate(stuff, time_slots)

tables = circles_generator.sort_timetables(tables, SORTING_ORDER)

i = 0
for t in tables:
    i += 1
    if i > MAX_OPTIONS:
        print 'Reached %d options; not printing out any more.' % MAX_OPTIONS
        break
    print_timetable(t)

print 'Got %d timetable options!' % len(tables)
